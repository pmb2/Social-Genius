version: '3.8'
services:
  # Development overrides
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "3000:3000"
      - "3001:3000"
    environment:
      NODE_ENV: development
      RUNNING_IN_DOCKER: 'true'
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/socialgenius
      DATABASE_URL_DOCKER: postgresql://postgres:postgres@postgres:5432/socialgenius
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: dev-secret-key-change-me
      BROWSER_USE_API_URL: http://browser-use-api:5055
      REDIS_URL: redis://redis:6379
      REDIS_PREFIX: "social-genius:dev:"
      SESSION_TTL: 86400
      NODE_PG_FORCE_NATIVE: '0'
      NODE_OPTIONS: "--require /app/pg-fix.cjs"
      PGHOST: postgres
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: socialgenius
      PGPORT: 5432
      JWT_SECRET: dev-secret-key-change-me
    volumes:
      - .:/app
      - /app/node_modules
      - ./pg-fix.cjs:/app/pg-fix.cjs
      - ./pg-fix.cjs:/app/pg-fix.cjs
    depends_on:
      - postgres
      - browser-use-api
      - redis
    command: >
      sh -c "
        # Wait for PostgreSQL to be ready
        echo 'Waiting for PostgreSQL to be ready...'
        until pg_isready -h postgres -U postgres; do
          echo 'PostgreSQL not ready yet - waiting...'
          sleep 2
        done
        echo 'PostgreSQL is ready!'
        
        # Make sure we're using JavaScript implementation
        export NODE_PG_FORCE_NATIVE=0
        
        # Create a pg-native mock module to avoid native dependency issues
        echo 'Creating mock pg-native module...'
        mkdir -p /app/node_modules/pg-native
        echo 'const pg = require(\"pg\"); exports.Client = pg.Client;' > /app/node_modules/pg-native/index.js
        echo '{\"name\":\"pg-native\",\"version\":\"3.0.0\"}' > /app/node_modules/pg-native/package.json
        
        # Also patch the pg library native loader
        echo 'Patching pg library native loader...'
        echo 'const Client = require(\"../client\"); exports.Client = Client;' > /app/node_modules/pg/lib/native/index.js
        
        # Apply simpler direct fix for pg-pool
        echo 'Creating pg-pool patch...'
        cat > /app/pg-pool-patch.js << 'EOF'
console.log('Patching pg-pool...');
const fs = require('fs');
try {
  const pgPoolPath = require.resolve('pg-pool');
  let content = fs.readFileSync(pgPoolPath, 'utf8');
  if (content.includes('constructor(options, Client)') && !content.includes('super()')) {
    content = content.replace(/constructor\(options, Client\) \{/, 'constructor(options, Client) {\n    super();');
    fs.writeFileSync(pgPoolPath, content);
    console.log('Successfully patched pg-pool');
  } else {
    console.log('pg-pool already patched or has unexpected format');
  }
} catch(e) {
  console.error('Error patching pg-pool:', e);
}
EOF
        # Run the patch
        node /app/pg-pool-patch.js
        
        # Fix Next.js middleware if needed
        if [ ! -f '/app/middleware.ts' ]; then
          echo 'Creating middleware.ts file...'
          echo 'export default function middleware() { return; }' > /app/middleware.ts
        fi
        
        # Start the application
        echo 'Starting application...'
        cd /app && npm run dev -- -H 0.0.0.0
      "

  # PostgreSQL with development settings
  postgres:
    image: pgvector/pgvector:pg14
    container_name: social-genius-postgres
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: socialgenius
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    
  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@socialgenius.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: 5050
    ports:
      - "5050:5050"
    depends_on:
      - postgres
    networks:
      - social_genius_network
      
  # Browser-Use API Service for automation
  browser-use-api:
    build:
      context: ./src/api/browser-use
      dockerfile: Dockerfile
    extra_hosts:
      - "host.docker.internal:host-gateway"
    container_name: social-genius-browser-api
    volumes:
      - ./src/api/browser-use/screenshots:/app/screenshots
    environment:
      - PORT=5055
      - HOST=0.0.0.0
      - MAX_CONCURRENT_BROWSERS=10
      - SCREENSHOT_PATH=/app/screenshots
      - REDIS_URL=redis://redis:6379
    ports:
      - "5055:5055"
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5055/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - social_genius_network
      
  # Redis for session sharing and caching
  redis:
    image: redis:alpine
    container_name: social-genius-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
      - ./src/config/redis.conf:/usr/local/etc/redis/redis.conf
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - social_genius_network
      
  # Redis Commander for development
  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - social_genius_network

volumes:
  postgres_data:
  redis_data:
  
networks:
  social_genius_network:
    driver: bridge



