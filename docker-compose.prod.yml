version: '3.8'
services:
  # HTTPS reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./src/nginx/conf/app.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    restart: unless-stopped
    depends_on:
      - app
      - browser-use-api
    networks:
      - social_genius_network
    environment:
      - DOMAIN=www.gbp.backus.agency
    command: "/bin/sh -c 'envsubst < /etc/nginx/conf.d/default.conf > /etc/nginx/conf.d/default.conf.bak && mv /etc/nginx/conf.d/default.conf.bak /etc/nginx/conf.d/default.conf && nginx -g \"daemon off;\"'"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    restart: unless-stopped
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Frontend and API application
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        DATABASE_URL: postgresql://postgres:postgres@postgres:5432/socialgenius
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - postgres
      - browser-use-api
      - redis
    environment:
      NODE_ENV: production
      RUNNING_IN_DOCKER: 'true'
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/socialgenius
      NEXTAUTH_URL: https://www.gbp.backus.agency
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-secure-nextauth-secret}
      BROWSER_USE_API_URL: http://browser-use-api:5055
      REDIS_URL: redis://host.docker.internal:6380
      REDIS_PREFIX: "social-genius:"
      SESSION_TTL: 86400
    restart: unless-stopped
    networks:
      - social_genius_network

  # PostgreSQL with pgvector for unified database
  postgres:
    image: pgvector/pgvector:pg14
    ports:
      - "127.0.0.1:5435:5432" # Only expose on localhost for security
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: socialgenius
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - social_genius_network
      
  # Browser-Use API Service for automation
  browser-use-api:
    build:
      context: ./src/api/browser-use
      dockerfile: Dockerfile
    extra_hosts:
      - "host.docker.internal:host-gateway"
    container_name: social-genius-browser-api
    volumes:
      - ./src/api/browser-use/screenshots:/app/screenshots
    environment:
      - PORT=5055
      - HOST=0.0.0.0
      - MAX_CONCURRENT_BROWSERS=10
      - SCREENSHOT_PATH=/app/screenshots
      - REDIS_URL=redis://host.docker.internal:6380
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5055/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - social_genius_network
      
  # Redis for session sharing and caching
  redis:
    image: redis:alpine
    container_name: social-genius-redis
    ports:
      - "127.0.0.1:6380:6379" # Only expose on localhost for security
    volumes:
      - redis_data:/data
      - ./src/config/redis.conf:/usr/local/etc/redis/redis.conf
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - social_genius_network

networks:
  social_genius_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: